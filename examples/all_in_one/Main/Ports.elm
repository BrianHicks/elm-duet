port module Main.Ports exposing (..)

{-| Warning: this file is automatically generated. Don't edit by hand!
-}

import Json.Decode
import Json.Decode.Pipeline
import Json.Encode


type alias NewJwt =
    { value : String
    }


newJwtDecoder : Decoder NewJwt
newJwtDecoder =
    Json.Decode.succeed NewJwt
        |> Json.Decode.Pipeline.required "value" Json.Decode.string


encodeNewJwt : NewJwt -> Json.Encode.Value
encodeNewJwt newJwt =
    Json.Encode.object
        [ ( "value", Json.Encode.string newJwt.value )
        , ( "tag", Json.Encode.string "newJwt" )
        ]


type ToWorld
    = Logout ()
    | NewJwt NewJwt



toWorldDecoder : Decoder ToWorld
toWorldDecoder =
    Json.Decode.andThen
        (\tag ->
            case tag of
                "logout" ->
                    Json.Decode.map Logout Json.Decode.null ()

                "newJwt" ->
                    Json.Decode.map NewJwt newJwtDecoder
        )
        (Json.Decode.field "tag" Json.Decode.string)


encodeToWorld : ToWorld -> Json.Encode.Value
encodeToWorld toWorld =
    case toWorld of
        Logout logout ->
            Json.Encode.null

        NewJwt newJwt ->
            encodeNewJwt newJwt


port toWorld : Value -> Cmd msg


sendToWorld : ToWorld -> Cmd msg
sendToWorld value =
    toWorld (encodeToWorld value)
