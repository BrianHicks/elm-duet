module Foo.Bar.Main.Ports exposing (..)

{-| Warning: this file is automatically generated. Don't edit by hand!
-}


type alias AddNewPingAt =
    { value : Float
    }


addNewPingAtDecoder : Decoder AddNewPingAt
addNewPingAtDecoder =
    Decode.map AddNewPingAt
        (Decode.field "value" Decode.float)


type alias SetMinutesPerPing =
    { value : Float
    }


setMinutesPerPingDecoder : Decoder SetMinutesPerPing
setMinutesPerPingDecoder =
    Decode.map SetMinutesPerPing
        (Decode.field "value" Decode.float)


type alias SetTagForPing =
    { index : Float
    , value : Maybe String
    }


setTagForPingDecoder : Decoder SetTagForPing
setTagForPingDecoder =
    Decode.map2 SetTagForPing
        (Decode.field "index" Decode.float)
        (Decode.field "value" (Decode.nullable Decode.string))


type ChangeDocument
    = AddNewPingAt AddNewPingAt
    | SetMinutesPerPing SetMinutesPerPing
    | SetTagForPing SetTagForPing



changeDocumentDecoder : Decoder ChangeDocument
changeDocumentDecoder =
    Decode.andThen
        (/tag ->
            case tag of
                "AddNewPingAt" ->
                    Decode.map AddNewPingAt addNewPingAtDecoder

                "SetMinutesPerPing" ->
                    Decode.map SetMinutesPerPing setMinutesPerPingDecoder

                "SetTagForPing" ->
                    Decode.map SetTagForPing setTagForPingDecoder

        )
        (Decode.field "tag" Decode.string)


type alias PingV1 =
    { custom : Dict String String
    , tag : Maybe String
    , time : Int
    }


pingV1Decoder : Decoder PingV1
pingV1Decoder =
    Decode.map3 PingV1
        (Decode.field "custom" (Decode.dict Decode.string))
        (Decode.field "tag" (Decode.nullable Decode.string))
        (Decode.field "time" Decode.int)


type PingsElements
    = PingV1 PingV1



pingsElementsDecoder : Decoder PingsElements
pingsElementsDecoder =
    Decode.andThen
        (/tag ->
            case tag of
                "v1" ->
                    Decode.map PingV1 pingV1Decoder

        )
        (Decode.field "version" Decode.string)


type alias SettingsV1 =
    { minutesPerPing : Int
    }


settingsV1Decoder : Decoder SettingsV1
settingsV1Decoder =
    Decode.map SettingsV1
        (Decode.field "minutesPerPing" Decode.int)


type Settings
    = SettingsV1 SettingsV1



settingsDecoder : Decoder Settings
settingsDecoder =
    Decode.andThen
        (/tag ->
            case tag of
                "v1" ->
                    Decode.map SettingsV1 settingsV1Decoder

        )
        (Decode.field "version" Decode.string)


type alias DocV1 =
    { pings : List PingsElements
    , settings : Settings
    }


docV1Decoder : Decoder DocV1
docV1Decoder =
    Decode.map2 DocV1
        (Decode.field "pings" (Decode.list pingsElementsDecoder))
        (Decode.field "settings" settingsDecoder)


type DocFromAutomerge
    = DocV1 DocV1



docFromAutomergeDecoder : Decoder DocFromAutomerge
docFromAutomergeDecoder =
    Decode.andThen
        (/tag ->
            case tag of
                "v1" ->
                    Decode.map DocV1 docV1Decoder

        )
        (Decode.field "version" Decode.string)


type NotificationPermission
    = Default
    | Denied
    | Granted



notificationPermissionDecoder : Decoder NotificationPermission
notificationPermissionDecoder =
    Decode.andThen
        (/tag ->
            case tag of
                "default" ->
                    Decode.succeed Default

                "denied" ->
                    Decode.succeed Denied

                "granted" ->
                    Decode.succeed Granted

        )
        Decode.string


type alias RequestNotificationPermission =
    ()


requestNotificationPermissionDecoder : Decoder RequestNotificationPermission
requestNotificationPermissionDecoder =
    Decode.null ()


type alias NotificationOptions =
    { badge : Maybe String
    , body : Maybe String
    , icon : Maybe String
    , lang : Maybe String
    , requireInteraction : Maybe Bool
    , silent : Maybe Bool
    , tag : Maybe String
    }


notificationOptionsDecoder : Decoder NotificationOptions
notificationOptionsDecoder =
    Decode.map7 NotificationOptions
        (Decode.field "badge" (Decode.nullable Decode.string))
        (Decode.field "body" (Decode.nullable Decode.string))
        (Decode.field "icon" (Decode.nullable Decode.string))
        (Decode.field "lang" (Decode.nullable Decode.string))
        (Decode.field "requireInteraction" (Decode.nullable Decode.bool))
        (Decode.field "silent" (Decode.nullable Decode.bool))
        (Decode.field "tag" (Decode.nullable Decode.string))


type alias SendNotification =
    { options : NotificationOptions
    , title : String
    }


sendNotificationDecoder : Decoder SendNotification
sendNotificationDecoder =
    Decode.map2 SendNotification
        (Decode.field "options" notificationOptionsDecoder)
        (Decode.field "title" Decode.string)
