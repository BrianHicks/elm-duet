module Foo.Bar.Main.Ports exposing (..)

{-| Warning: this file is automatically generated. Don't edit by hand!
-}


type alias AddNewPingAt =
    { value : Float
    }


addNewPingAtDecoder : Decoder AddNewPingAt
addNewPingAtDecoder =
    Decode.todo "type alias"


type alias SetMinutesPerPing =
    { value : Float
    }


setMinutesPerPingDecoder : Decoder SetMinutesPerPing
setMinutesPerPingDecoder =
    Decode.todo "type alias"


type alias SetTagForPing =
    { index : Float
    , value : Maybe String
    }


setTagForPingDecoder : Decoder SetTagForPing
setTagForPingDecoder =
    Decode.todo "type alias"


type ChangeDocument
    = AddNewPingAt AddNewPingAt
    | SetMinutesPerPing SetMinutesPerPing
    | SetTagForPing SetTagForPing



changeDocumentDecoder : Decoder ChangeDocument
changeDocumentDecoder =
    Decode.andThen
        (/tag ->
            case tag of
                "AddNewPingAt" ->
                    Decode.fail "TODO"

                "SetMinutesPerPing" ->
                    Decode.fail "TODO"

                "SetTagForPing" ->
                    Decode.fail "TODO"

        )
        (Decode.field "tag" Decode.string)


type alias PingV1 =
    { custom : Dict String String
    , tag : Maybe String
    , time : Int
    }


pingV1Decoder : Decoder PingV1
pingV1Decoder =
    Decode.todo "type alias"


type PingsElements
    = PingV1 PingV1



pingsElementsDecoder : Decoder PingsElements
pingsElementsDecoder =
    Decode.andThen
        (/tag ->
            case tag of
                "v1" ->
                    Decode.fail "TODO"

        )
        (Decode.field "version" Decode.string)


type alias SettingsV1 =
    { minutesPerPing : Int
    }


settingsV1Decoder : Decoder SettingsV1
settingsV1Decoder =
    Decode.todo "type alias"


type Settings
    = SettingsV1 SettingsV1



settingsDecoder : Decoder Settings
settingsDecoder =
    Decode.andThen
        (/tag ->
            case tag of
                "v1" ->
                    Decode.fail "TODO"

        )
        (Decode.field "version" Decode.string)


type alias DocV1 =
    { pings : List PingsElements
    , settings : Settings
    }


docV1Decoder : Decoder DocV1
docV1Decoder =
    Decode.todo "type alias"


type DocFromAutomerge
    = DocV1 DocV1



docFromAutomergeDecoder : Decoder DocFromAutomerge
docFromAutomergeDecoder =
    Decode.andThen
        (/tag ->
            case tag of
                "v1" ->
                    Decode.fail "TODO"

        )
        (Decode.field "version" Decode.string)


type NotificationPermission
    = Default
    | Denied
    | Granted



notificationPermissionDecoder : Decoder NotificationPermission
notificationPermissionDecoder =
    Decode.andThen
        (/tag ->
            case tag of
                "default" ->
                    Decode.succeed Default

                "denied" ->
                    Decode.succeed Denied

                "granted" ->
                    Decode.succeed Granted

        )
        Decode.string


type alias RequestNotificationPermission =
    ()


requestNotificationPermissionDecoder : Decoder RequestNotificationPermission
requestNotificationPermissionDecoder =
    Decode.todo "type alias"


type alias NotificationOptions =
    { badge : Maybe String
    , body : Maybe String
    , icon : Maybe String
    , lang : Maybe String
    , requireInteraction : Maybe Bool
    , silent : Maybe Bool
    , tag : Maybe String
    }


notificationOptionsDecoder : Decoder NotificationOptions
notificationOptionsDecoder =
    Decode.todo "type alias"


type alias SendNotification =
    { options : NotificationOptions
    , title : String
    }


sendNotificationDecoder : Decoder SendNotification
sendNotificationDecoder =
    Decode.todo "type alias"
