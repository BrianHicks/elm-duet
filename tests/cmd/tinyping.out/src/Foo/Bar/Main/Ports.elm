port module Foo.Bar.Main.Ports exposing (..)

{-| Warning: this file is automatically generated. Don't edit by hand!
-}

import Json.Decode
import Json.Encode


type alias AddNewPingAt =
    { value : Float
    }


addNewPingAtDecoder : Decoder AddNewPingAt
addNewPingAtDecoder =
    Json.Decode.map AddNewPingAt
        (Json.Decode.field "value" Json.Decode.float)


encodeAddNewPingAt : AddNewPingAt -> Json.Encode.Value
encodeAddNewPingAt addNewPingAt =
    Json.Encode.object
        [ ( "value", Json.Encode.float addNewPingAt.value )
        , ( "tag", Json.Encode.string "AddNewPingAt" )
        ]


type alias SetMinutesPerPing =
    { value : Float
    }


setMinutesPerPingDecoder : Decoder SetMinutesPerPing
setMinutesPerPingDecoder =
    Json.Decode.map SetMinutesPerPing
        (Json.Decode.field "value" Json.Decode.float)


encodeSetMinutesPerPing : SetMinutesPerPing -> Json.Encode.Value
encodeSetMinutesPerPing setMinutesPerPing =
    Json.Encode.object
        [ ( "value", Json.Encode.float setMinutesPerPing.value )
        , ( "tag", Json.Encode.string "SetMinutesPerPing" )
        ]


type alias SetTagForPing =
    { index : Float
    , value : Maybe String
    }


setTagForPingDecoder : Decoder SetTagForPing
setTagForPingDecoder =
    Json.Decode.map2 SetTagForPing
        (Json.Decode.field "index" Json.Decode.float)
        (Json.Decode.field "value" (Json.Decode.nullable Json.Decode.string))


encodeSetTagForPing : SetTagForPing -> Json.Encode.Value
encodeSetTagForPing setTagForPing =
    Json.Encode.object
        [ ( "index", Json.Encode.float setTagForPing.index )
        , ( "value"
          , case setTagForPing.value of
                Just value ->
                    Json.Encode.string value
            
                Nothing ->
                    Json.Encode.null
          )
        , ( "tag", Json.Encode.string "SetTagForPing" )
        ]


type ChangeDocument
    = AddNewPingAt AddNewPingAt
    | SetMinutesPerPing SetMinutesPerPing
    | SetTagForPing SetTagForPing



changeDocumentDecoder : Decoder ChangeDocument
changeDocumentDecoder =
    Json.Decode.andThen
        (/tag ->
            case tag of
                "AddNewPingAt" ->
                    Json.Decode.map AddNewPingAt addNewPingAtDecoder

                "SetMinutesPerPing" ->
                    Json.Decode.map SetMinutesPerPing setMinutesPerPingDecoder

                "SetTagForPing" ->
                    Json.Decode.map SetTagForPing setTagForPingDecoder

        )
        (Json.Decode.field "tag" Json.Decode.string)


encodeChangeDocument : ChangeDocument -> Json.Encode.Value
encodeChangeDocument changeDocument =
    case changeDocument of
        AddNewPingAt addNewPingAt ->
            encodeAddNewPingAt addNewPingAt

        SetMinutesPerPing setMinutesPerPing ->
            encodeSetMinutesPerPing setMinutesPerPing

        SetTagForPing setTagForPing ->
            encodeSetTagForPing setTagForPing


type alias PingV1 =
    { custom : Dict String String
    , tag : Maybe String
    , time : Int
    }


pingV1Decoder : Decoder PingV1
pingV1Decoder =
    Json.Decode.map3 PingV1
        (Json.Decode.field "custom" (Json.Decode.dict Json.Decode.string))
        (Json.Decode.field "tag" (Json.Decode.nullable Json.Decode.string))
        (Json.Decode.field "time" Json.Decode.int)


encodePingV1 : PingV1 -> Json.Encode.Value
encodePingV1 pingV1 =
    Json.Encode.object
        [ ( "custom", Json.Encode.dict identity (/value -> Json.Encode.string value) pingV1.custom )
        , ( "tag"
          , case pingV1.tag of
                Just value ->
                    Json.Encode.string value
            
                Nothing ->
                    Json.Encode.null
          )
        , ( "time", Json.Encode.int pingV1.time )
        , ( "version", Json.Encode.string "v1" )
        ]


type PingsElements
    = PingV1 PingV1



pingsElementsDecoder : Decoder PingsElements
pingsElementsDecoder =
    Json.Decode.andThen
        (/tag ->
            case tag of
                "v1" ->
                    Json.Decode.map PingV1 pingV1Decoder

        )
        (Json.Decode.field "version" Json.Decode.string)


encodePingsElements : PingsElements -> Json.Encode.Value
encodePingsElements pingsElements =
    case pingsElements of
        PingV1 pingV1 ->
            encodePingV1 pingV1


type alias SettingsV1 =
    { minutesPerPing : Int
    }


settingsV1Decoder : Decoder SettingsV1
settingsV1Decoder =
    Json.Decode.map SettingsV1
        (Json.Decode.field "minutesPerPing" Json.Decode.int)


encodeSettingsV1 : SettingsV1 -> Json.Encode.Value
encodeSettingsV1 settingsV1 =
    Json.Encode.object
        [ ( "minutesPerPing", Json.Encode.int settingsV1.minutesPerPing )
        , ( "version", Json.Encode.string "v1" )
        ]


type Settings
    = SettingsV1 SettingsV1



settingsDecoder : Decoder Settings
settingsDecoder =
    Json.Decode.andThen
        (/tag ->
            case tag of
                "v1" ->
                    Json.Decode.map SettingsV1 settingsV1Decoder

        )
        (Json.Decode.field "version" Json.Decode.string)


encodeSettings : Settings -> Json.Encode.Value
encodeSettings settings =
    case settings of
        SettingsV1 settingsV1 ->
            encodeSettingsV1 settingsV1


type alias DocV1 =
    { pings : List PingsElements
    , settings : Settings
    }


docV1Decoder : Decoder DocV1
docV1Decoder =
    Json.Decode.map2 DocV1
        (Json.Decode.field "pings" (Json.Decode.list pingsElementsDecoder))
        (Json.Decode.field "settings" settingsDecoder)


encodeDocV1 : DocV1 -> Json.Encode.Value
encodeDocV1 docV1 =
    Json.Encode.object
        [ ( "pings", Json.Encode.list (/value -> encodePingsElements value) docV1.pings )
        , ( "settings", encodeSettings docV1.settings )
        , ( "version", Json.Encode.string "v1" )
        ]


type DocFromAutomerge
    = DocV1 DocV1



docFromAutomergeDecoder : Decoder DocFromAutomerge
docFromAutomergeDecoder =
    Json.Decode.andThen
        (/tag ->
            case tag of
                "v1" ->
                    Json.Decode.map DocV1 docV1Decoder

        )
        (Json.Decode.field "version" Json.Decode.string)


encodeDocFromAutomerge : DocFromAutomerge -> Json.Encode.Value
encodeDocFromAutomerge docFromAutomerge =
    case docFromAutomerge of
        DocV1 docV1 ->
            encodeDocV1 docV1


type NotificationPermission
    = Default
    | Denied
    | Granted



notificationPermissionDecoder : Decoder NotificationPermission
notificationPermissionDecoder =
    Json.Decode.andThen
        (/tag ->
            case tag of
                "default" ->
                    Json.Decode.succeed Default

                "denied" ->
                    Json.Decode.succeed Denied

                "granted" ->
                    Json.Decode.succeed Granted

        )
        Json.Decode.string


encodeNotificationPermission : NotificationPermission -> Json.Encode.Value
encodeNotificationPermission notificationPermission =
    case notificationPermission of
        Default ->
            Json.Encode.string "default"

        Denied ->
            Json.Encode.string "denied"

        Granted ->
            Json.Encode.string "granted"


type alias RequestNotificationPermission =
    ()


requestNotificationPermissionDecoder : Decoder RequestNotificationPermission
requestNotificationPermissionDecoder =
    Json.Decode.null ()


encodeRequestNotificationPermission : RequestNotificationPermission -> Json.Encode.Value
encodeRequestNotificationPermission requestNotificationPermission =
    Json.Encode.null


type alias NotificationOptions =
    { badge : Maybe String
    , body : Maybe String
    , icon : Maybe String
    , lang : Maybe String
    , requireInteraction : Maybe Bool
    , silent : Maybe Bool
    , tag : Maybe String
    }


notificationOptionsDecoder : Decoder NotificationOptions
notificationOptionsDecoder =
    Json.Decode.map7 NotificationOptions
        (Json.Decode.field "badge" (Json.Decode.nullable Json.Decode.string))
        (Json.Decode.field "body" (Json.Decode.nullable Json.Decode.string))
        (Json.Decode.field "icon" (Json.Decode.nullable Json.Decode.string))
        (Json.Decode.field "lang" (Json.Decode.nullable Json.Decode.string))
        (Json.Decode.field "requireInteraction" (Json.Decode.nullable Json.Decode.bool))
        (Json.Decode.field "silent" (Json.Decode.nullable Json.Decode.bool))
        (Json.Decode.field "tag" (Json.Decode.nullable Json.Decode.string))


encodeNotificationOptions : NotificationOptions -> Json.Encode.Value
encodeNotificationOptions notificationOptions =
    Json.Encode.object
        [ ( "badge"
          , case notificationOptions.badge of
                Just value ->
                    Json.Encode.string value
            
                Nothing ->
                    Json.Encode.null
          )
        , ( "body"
          , case notificationOptions.body of
                Just value ->
                    Json.Encode.string value
            
                Nothing ->
                    Json.Encode.null
          )
        , ( "icon"
          , case notificationOptions.icon of
                Just value ->
                    Json.Encode.string value
            
                Nothing ->
                    Json.Encode.null
          )
        , ( "lang"
          , case notificationOptions.lang of
                Just value ->
                    Json.Encode.string value
            
                Nothing ->
                    Json.Encode.null
          )
        , ( "requireInteraction"
          , case notificationOptions.requireInteraction of
                Just value ->
                    Json.Encode.bool value
            
                Nothing ->
                    Json.Encode.null
          )
        , ( "silent"
          , case notificationOptions.silent of
                Just value ->
                    Json.Encode.bool value
            
                Nothing ->
                    Json.Encode.null
          )
        , ( "tag"
          , case notificationOptions.tag of
                Just value ->
                    Json.Encode.string value
            
                Nothing ->
                    Json.Encode.null
          )
        ]


type alias SendNotification =
    { options : NotificationOptions
    , title : String
    }


sendNotificationDecoder : Decoder SendNotification
sendNotificationDecoder =
    Json.Decode.map2 SendNotification
        (Json.Decode.field "options" notificationOptionsDecoder)
        (Json.Decode.field "title" Json.Decode.string)


encodeSendNotification : SendNotification -> Json.Encode.Value
encodeSendNotification sendNotification =
    Json.Encode.object
        [ ( "options", encodeNotificationOptions sendNotification.options )
        , ( "title", Json.Encode.string sendNotification.title )
        ]


port changeDocument : Value -> Cmd msg


changeDocument_ : ChangeDocument -> Cmd msg
changeDocument_ value =
    changeDocument (encodeChangeDocument value)


port docFromAutomerge : (Value -> msg) -> Sub msg


docFromAutomerge_ : (Result Json.Decode.Error DocFromAutomerge -> msg) -> Sub msg
docFromAutomerge_ toMsg =
    docFromAutomerge (/value -> toMsg (Json.Decode.decodeValue value docFromAutomergeDecoder)


port notificationPermission : (Value -> msg) -> Sub msg


notificationPermission_ : (Result Json.Decode.Error NotificationPermission -> msg) -> Sub msg
notificationPermission_ toMsg =
    notificationPermission (/value -> toMsg (Json.Decode.decodeValue value notificationPermissionDecoder)


port requestNotificationPermission : Value -> Cmd msg


requestNotificationPermission_ : RequestNotificationPermission -> Cmd msg
requestNotificationPermission_ value =
    requestNotificationPermission (encodeRequestNotificationPermission value)


port sendNotification : Value -> Cmd msg


sendNotification_ : SendNotification -> Cmd msg
sendNotification_ value =
    sendNotification (encodeSendNotification value)
