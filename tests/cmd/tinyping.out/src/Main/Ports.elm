port module Main.Ports exposing (..)

{-| Warning: this file is automatically generated. Don't edit by hand!
-}

import Dict exposing (Dict)
import Json.Decode
import Json.Decode.Pipeline
import Json.Encode


type alias AddNewPingAt =
    { value : Float
    }


addNewPingAtDecoder : Json.Decode.Decoder AddNewPingAt
addNewPingAtDecoder =
    Json.Decode.succeed AddNewPingAt
        |> Json.Decode.Pipeline.required "value" Json.Decode.float


encodeAddNewPingAt : AddNewPingAt -> Json.Encode.Value
encodeAddNewPingAt addNewPingAt =
    Json.Encode.object
        [ ( "value", Json.Encode.float addNewPingAt.value )
        , ( "tag", Json.Encode.string "AddNewPingAt" )
        ]


type alias SetMinutesPerPing =
    { value : Float
    }


setMinutesPerPingDecoder : Json.Decode.Decoder SetMinutesPerPing
setMinutesPerPingDecoder =
    Json.Decode.succeed SetMinutesPerPing
        |> Json.Decode.Pipeline.required "value" Json.Decode.float


encodeSetMinutesPerPing : SetMinutesPerPing -> Json.Encode.Value
encodeSetMinutesPerPing setMinutesPerPing =
    Json.Encode.object
        [ ( "value", Json.Encode.float setMinutesPerPing.value )
        , ( "tag", Json.Encode.string "SetMinutesPerPing" )
        ]


type alias SetTagForPing =
    { index : Float
    , value : Maybe String
    }


setTagForPingDecoder : Json.Decode.Decoder SetTagForPing
setTagForPingDecoder =
    Json.Decode.succeed SetTagForPing
        |> Json.Decode.Pipeline.required "index" Json.Decode.float
        |> Json.Decode.Pipeline.required "value" (Json.Decode.nullable Json.Decode.string)


encodeSetTagForPing : SetTagForPing -> Json.Encode.Value
encodeSetTagForPing setTagForPing =
    Json.Encode.object
        [ ( "index", Json.Encode.float setTagForPing.index )
        , ( "value"
          , case setTagForPing.value of
                Just value ->
                    Json.Encode.string value

                Nothing ->
                    Json.Encode.null
          )
        , ( "tag", Json.Encode.string "SetTagForPing" )
        ]


type ChangeDocument
    = AddNewPingAt AddNewPingAt
    | SetMinutesPerPing SetMinutesPerPing
    | SetTagForPing SetTagForPing


changeDocumentDecoder : Json.Decode.Decoder ChangeDocument
changeDocumentDecoder =
    Json.Decode.andThen
        (/tag ->
            case tag of
                "AddNewPingAt" ->
                    Json.Decode.map AddNewPingAt addNewPingAtDecoder

                "SetMinutesPerPing" ->
                    Json.Decode.map SetMinutesPerPing setMinutesPerPingDecoder

                "SetTagForPing" ->
                    Json.Decode.map SetTagForPing setTagForPingDecoder
        )
        (Json.Decode.field "tag" Json.Decode.string)


encodeChangeDocument : ChangeDocument -> Json.Encode.Value
encodeChangeDocument changeDocument =
    case changeDocument of
        AddNewPingAt addNewPingAt ->
            encodeAddNewPingAt addNewPingAt

        SetMinutesPerPing setMinutesPerPing ->
            encodeSetMinutesPerPing setMinutesPerPing

        SetTagForPing setTagForPing ->
            encodeSetTagForPing setTagForPing


type alias PingV1 =
    { custom : Dict String String
    , tag : Maybe String
    , time : Int
    }


pingV1Decoder : Json.Decode.Decoder PingV1
pingV1Decoder =
    Json.Decode.succeed PingV1
        |> Json.Decode.Pipeline.required "custom" (Json.Decode.dict Json.Decode.string)
        |> Json.Decode.Pipeline.required "tag" (Json.Decode.nullable Json.Decode.string)
        |> Json.Decode.Pipeline.required "time" Json.Decode.int


encodePingV1 : PingV1 -> Json.Encode.Value
encodePingV1 pingV1 =
    Json.Encode.object
        [ ( "custom", Json.Encode.dict identity (/value -> Json.Encode.string value) pingV1.custom )
        , ( "tag"
          , case pingV1.tag of
                Just value ->
                    Json.Encode.string value

                Nothing ->
                    Json.Encode.null
          )
        , ( "time", Json.Encode.int pingV1.time )
        , ( "version", Json.Encode.string "v1" )
        ]


type PingsElements
    = PingV1 PingV1


pingsElementsDecoder : Json.Decode.Decoder PingsElements
pingsElementsDecoder =
    Json.Decode.andThen
        (/tag ->
            case tag of
                "v1" ->
                    Json.Decode.map PingV1 pingV1Decoder
        )
        (Json.Decode.field "version" Json.Decode.string)


encodePingsElements : PingsElements -> Json.Encode.Value
encodePingsElements pingsElements =
    case pingsElements of
        PingV1 pingV1 ->
            encodePingV1 pingV1


type alias SettingsV1 =
    { minutesPerPing : Int
    }


settingsV1Decoder : Json.Decode.Decoder SettingsV1
settingsV1Decoder =
    Json.Decode.succeed SettingsV1
        |> Json.Decode.Pipeline.required "minutesPerPing" Json.Decode.int


encodeSettingsV1 : SettingsV1 -> Json.Encode.Value
encodeSettingsV1 settingsV1 =
    Json.Encode.object
        [ ( "minutesPerPing", Json.Encode.int settingsV1.minutesPerPing )
        , ( "version", Json.Encode.string "v1" )
        ]


type Settings
    = SettingsV1 SettingsV1


settingsDecoder : Json.Decode.Decoder Settings
settingsDecoder =
    Json.Decode.andThen
        (/tag ->
            case tag of
                "v1" ->
                    Json.Decode.map SettingsV1 settingsV1Decoder
        )
        (Json.Decode.field "version" Json.Decode.string)


encodeSettings : Settings -> Json.Encode.Value
encodeSettings settings =
    case settings of
        SettingsV1 settingsV1 ->
            encodeSettingsV1 settingsV1


type alias DocV1 =
    { pings : List PingsElements
    , settings : Settings
    }


docV1Decoder : Json.Decode.Decoder DocV1
docV1Decoder =
    Json.Decode.succeed DocV1
        |> Json.Decode.Pipeline.required "pings" (Json.Decode.list pingsElementsDecoder)
        |> Json.Decode.Pipeline.required "settings" settingsDecoder


encodeDocV1 : DocV1 -> Json.Encode.Value
encodeDocV1 docV1 =
    Json.Encode.object
        [ ( "pings", Json.Encode.list (/value -> encodePingsElements value) docV1.pings )
        , ( "settings", encodeSettings docV1.settings )
        , ( "version", Json.Encode.string "v1" )
        ]


type DocFromAutomerge
    = DocV1 DocV1


docFromAutomergeDecoder : Json.Decode.Decoder DocFromAutomerge
docFromAutomergeDecoder =
    Json.Decode.andThen
        (/tag ->
            case tag of
                "v1" ->
                    Json.Decode.map DocV1 docV1Decoder
        )
        (Json.Decode.field "version" Json.Decode.string)


encodeDocFromAutomerge : DocFromAutomerge -> Json.Encode.Value
encodeDocFromAutomerge docFromAutomerge =
    case docFromAutomerge of
        DocV1 docV1 ->
            encodeDocV1 docV1


type alias NotificationOptions =
    { badge : Maybe String
    , body : Maybe String
    , icon : Maybe String
    , lang : Maybe String
    , requireInteraction : Maybe Bool
    , silent : Maybe Bool
    , tag : Maybe String
    }


notificationOptionsDecoder : Json.Decode.Decoder NotificationOptions
notificationOptionsDecoder =
    Json.Decode.succeed NotificationOptions
        |> Json.Decode.Pipeline.required "badge" (Json.Decode.nullable Json.Decode.string)
        |> Json.Decode.Pipeline.required "body" (Json.Decode.nullable Json.Decode.string)
        |> Json.Decode.Pipeline.required "icon" (Json.Decode.nullable Json.Decode.string)
        |> Json.Decode.Pipeline.required "lang" (Json.Decode.nullable Json.Decode.string)
        |> Json.Decode.Pipeline.required "requireInteraction" (Json.Decode.nullable Json.Decode.bool)
        |> Json.Decode.Pipeline.required "silent" (Json.Decode.nullable Json.Decode.bool)
        |> Json.Decode.Pipeline.required "tag" (Json.Decode.nullable Json.Decode.string)


encodeNotificationOptions : NotificationOptions -> Json.Encode.Value
encodeNotificationOptions notificationOptions =
    Json.Encode.object
        [ ( "badge"
          , case notificationOptions.badge of
                Just value ->
                    Json.Encode.string value

                Nothing ->
                    Json.Encode.null
          )
        , ( "body"
          , case notificationOptions.body of
                Just value ->
                    Json.Encode.string value

                Nothing ->
                    Json.Encode.null
          )
        , ( "icon"
          , case notificationOptions.icon of
                Just value ->
                    Json.Encode.string value

                Nothing ->
                    Json.Encode.null
          )
        , ( "lang"
          , case notificationOptions.lang of
                Just value ->
                    Json.Encode.string value

                Nothing ->
                    Json.Encode.null
          )
        , ( "requireInteraction"
          , case notificationOptions.requireInteraction of
                Just value ->
                    Json.Encode.bool value

                Nothing ->
                    Json.Encode.null
          )
        , ( "silent"
          , case notificationOptions.silent of
                Just value ->
                    Json.Encode.bool value

                Nothing ->
                    Json.Encode.null
          )
        , ( "tag"
          , case notificationOptions.tag of
                Just value ->
                    Json.Encode.string value

                Nothing ->
                    Json.Encode.null
          )
        ]


type alias NewNotification =
    { options : NotificationOptions
    , title : String
    }


newNotificationDecoder : Json.Decode.Decoder NewNotification
newNotificationDecoder =
    Json.Decode.succeed NewNotification
        |> Json.Decode.Pipeline.required "options" notificationOptionsDecoder
        |> Json.Decode.Pipeline.required "title" Json.Decode.string


encodeNewNotification : NewNotification -> Json.Encode.Value
encodeNewNotification newNotification =
    Json.Encode.object
        [ ( "options", encodeNotificationOptions newNotification.options )
        , ( "title", Json.Encode.string newNotification.title )
        ]


type NotificationPermission
    = Default
    | Denied
    | Granted


notificationPermissionDecoder : Json.Decode.Decoder NotificationPermission
notificationPermissionDecoder =
    Json.Decode.andThen
        (/tag ->
            case tag of
                "default" ->
                    Json.Decode.succeed Default

                "denied" ->
                    Json.Decode.succeed Denied

                "granted" ->
                    Json.Decode.succeed Granted
        )
        Json.Decode.string


encodeNotificationPermission : NotificationPermission -> Json.Encode.Value
encodeNotificationPermission notificationPermission =
    case notificationPermission of
        Default ->
            Json.Encode.string "default"

        Denied ->
            Json.Encode.string "denied"

        Granted ->
            Json.Encode.string "granted"


type alias RequestNotificationPermission =
    ()


requestNotificationPermissionDecoder : Json.Decode.Decoder RequestNotificationPermission
requestNotificationPermissionDecoder =
    Json.Decode.null ()


encodeRequestNotificationPermission : RequestNotificationPermission -> Json.Encode.Value
encodeRequestNotificationPermission requestNotificationPermission =
    Json.Encode.null


port changeDocument : Json.Decode.Value -> Cmd msg


sendChangeDocument : ChangeDocument -> Cmd msg
sendChangeDocument value =
    changeDocument (encodeChangeDocument value)


port docFromAutomerge : (Json.Decode.Value -> msg) -> Sub msg


subscribeToDocFromAutomerge : (Result Json.Decode.Error DocFromAutomerge -> msg) -> Sub msg
subscribeToDocFromAutomerge toMsg =
    docFromAutomerge (/value -> toMsg (Json.Decode.decodeValue value docFromAutomergeDecoder))


port newNotification : Json.Decode.Value -> Cmd msg


sendNewNotification : NewNotification -> Cmd msg
sendNewNotification value =
    newNotification (encodeNewNotification value)


port notificationPermission : (Json.Decode.Value -> msg) -> Sub msg


subscribeToNotificationPermission : (Result Json.Decode.Error NotificationPermission -> msg) -> Sub msg
subscribeToNotificationPermission toMsg =
    notificationPermission (/value -> toMsg (Json.Decode.decodeValue value notificationPermissionDecoder))


port requestNotificationPermission : Json.Decode.Value -> Cmd msg


sendRequestNotificationPermission : RequestNotificationPermission -> Cmd msg
sendRequestNotificationPermission value =
    requestNotificationPermission (encodeRequestNotificationPermission value)
