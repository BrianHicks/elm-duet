module Main.Flags exposing (..)

{-| Warning: this file is automatically generated. Don't edit by hand!
-}

import Json.Decode
import Json.Decode.Pipeline
import Json.Encode


type NotificationPermission
    = Default
    | Denied
    | Granted



notificationPermissionDecoder : Decoder NotificationPermission
notificationPermissionDecoder =
    Json.Decode.andThen
        (/tag ->
            case tag of
                "default" ->
                    Json.Decode.succeed Default

                "denied" ->
                    Json.Decode.succeed Denied

                "granted" ->
                    Json.Decode.succeed Granted
        )
        Json.Decode.string


encodeNotificationPermission : NotificationPermission -> Json.Encode.Value
encodeNotificationPermission notificationPermission =
    case notificationPermission of
        Default ->
            Json.Encode.string "default"

        Denied ->
            Json.Encode.string "denied"

        Granted ->
            Json.Encode.string "granted"


type alias Flags =
    { currentTimeMillis : Float
    , notificationPermission : NotificationPermission
    }


flagsDecoder : Decoder Flags
flagsDecoder =
    Json.Decode.succeed Flags
        |> Json.Decode.Pipeline.required "currentTimeMillis" Json.Decode.float
        |> Json.Decode.Pipeline.required "notificationPermission" notificationPermissionDecoder


encodeFlags : Flags -> Json.Encode.Value
encodeFlags flags =
    Json.Encode.object
        [ ( "currentTimeMillis", Json.Encode.float flags.currentTimeMillis )
        , ( "notificationPermission", encodeNotificationPermission flags.notificationPermission )
        ]
