use crate::typescript::NamespaceBuilder;
use crate::typescript::TSType;
use color_eyre::Result;
use eyre::WrapErr;
use serde::Deserialize;
use std::collections::BTreeMap;
use std::path::Path;

#[derive(Debug, Deserialize)]
pub struct Schema {
    #[serde(default)]
    pub definitions: BTreeMap<String, jtd::SerdeSchema>,
    pub modules: BTreeMap<String, Module>,
}

#[derive(Debug, Deserialize)]
pub struct Module {
    pub flags: Option<jtd::SerdeSchema>,
}

impl Schema {
    pub fn from_fs(path: &Path) -> Result<Schema> {
        let bytes = std::fs::read(path).wrap_err_with(|| format!("could not read {path:?}"))?;
        serde_json::from_slice(&bytes)
            .wrap_err_with(|| format!("could not read schema from {path:?}"))
    }

    pub fn flags_to_ts(&self) -> Result<String> {
        let mut builder = NamespaceBuilder::root("Elm".to_string());

        // let mut classes = Vec::with_capacity(self.modules.len());

        for (module_name, module) in &self.modules {
            let module_path: Vec<&str> = module_name.split(".").collect();

            if let Some(flags_serde) = &module.flags {
                builder.insert(
                    &module_path,
                    TSType::from_schema(
                        jtd::Schema::from_serde_schema(flags_serde.clone()).wrap_err_with(
                            || {
                                format!(
                                    "could not interpret JTD schema for flags in the {} module",
                                    module_name
                                )
                            },
                        )?,
                    )
                    .into_typedecl("Flags".to_string()),
                )?;
            } else {
                builder.insert(
                    &module_path,
                    TSType::new_ref("Record<string, never>".to_string()),
                )?;
            }

            builder.insert(
                &module_path,
                TSType::new_ref("Flags".to_string()).into_init(),
            )?;

            builder.insert(
                &module_path,
                TSType::new_object(BTreeMap::new()).into_typedecl("Ports".to_string()),
            )?;
        }

        Ok(format!(
            "// Warning: this file is automatically generated. Don't edit by hand!\n\n{}",
            builder.into_tstype().to_source()
        ))
    }
}
